package com.sprd.soundrecorder.ui;

import android.animation.ValueAnimator;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.util.Log;
import android.util.SparseArray;
import android.view.View;
import android.view.animation.LinearInterpolator;

import com.android.soundrecorder.R;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by jian.xu on 2017/10/16.
 */

public class RecordWaveView extends View {

    private String TAG = "RecordWaveView";
    private float mSpace;
    private float mWavesInterval;
    private Paint mPaintDate, mPaintLine, mPaintTag, mPaintText, mPaintBaseLine;
    private String mDateColor = "#ffffff";
    private String mTagColor = "#f24a09";   //橙色
    private String mStandColor = "#F15050";   //红色
    private List<Float> mWaveDataList = new ArrayList<>();
    private SparseArray<Integer> mTagSparseArray = new SparseArray<>();
    private boolean mIsRecordPlay = false;
    private Bitmap mBitmap;
    private Bitmap mLowBitmap;
    private Bitmap mWhiteBitmap;
    private int mPosition = 0;
    private int mCount = 0;
    private int mTagNumber = 0;
    private int mVisibleLines = 0;
    private float mWaveBaseValue;
    private int mLastSize = 0;
    private int mLastTag = 0;
    private int mTagHalfSize = 0;
    private int mSmallTagHalfSize = 0;

    public RecordWaveView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        init();
    }

    public RecordWaveView(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public RecordWaveView(Context context) {
        super(context);
        init();
    }

    public RecordWaveView(Context context, boolean isPlay) {
        super(context);
        init();
        mIsRecordPlay = isPlay;
    }

    private void init() {
        Resources res = getResources();
        mSpace = res.getDimension(R.dimen.panit_line_space)/2;
        mWavesInterval = mSpace / 3;

        mPaintDate = new Paint();
        mPaintDate.setStrokeWidth(mSpace * 0.5f);
        mPaintDate.setColor(Color.parseColor(mDateColor));
        // mPaintDate.setAlpha(100);

        mPaintBaseLine = new Paint();
        mPaintBaseLine.setStrokeWidth(mSpace * 0.5f);
        mPaintBaseLine.setColor(Color.parseColor(mDateColor));

        mPaintLine = new Paint();
        mPaintLine.setStrokeWidth(mSpace * 0.5f);
        mPaintLine.setColor(Color.parseColor(mStandColor));

        mPaintTag = new Paint();
        mPaintTag.setStrokeWidth(mSpace * 0.5f);
        mPaintTag.setColor(Color.parseColor(mTagColor));

        mPaintText = new Paint();
        mPaintText.setTextSize(mSpace * 0.5f);
        mPaintText.setColor(Color.WHITE);

        mBitmap = BitmapFactory.decodeResource(res, R.drawable.tag);   //Bitmap.getWidth()   15
        mTagHalfSize = mBitmap.getWidth() / 2;    //mBitmap.getWidth()/2
        mLowBitmap = BitmapFactory.decodeResource(res, R.drawable.taglow);    //Bitmap.getWidth()  30
        mSmallTagHalfSize = mLowBitmap.getWidth() / 2;  //mLowBitmap.getWidth()/2
        mWhiteBitmap = BitmapFactory.decodeResource(res, R.drawable.whiteline);
        invalidate();
    }

    public void setWaveData(List<Float> waveDataList, SparseArray<Integer> tagArray) {
        reset();
        mWaveDataList = waveDataList;
        mTagSparseArray = tagArray;
    }

    public void reset() {
        mCount = 0;
        mLastTag = 0;
        mLastSize = 0;
    }

    public int getWaveDataSize() {
        return mWaveDataList.size();
    }

    public boolean isHaveWaveData() {
        return mWaveDataList.size() > 0;
    }

    public void setCurrentPosition(float currentPosition) {
        Log.e("gyc","setCurrentPosition= "+(((float) mWaveDataList.size()) * currentPosition)+" ="+((int) (((float) mWaveDataList.size()) * currentPosition)));
        mPosition = (int) (((float) mWaveDataList.size()) * currentPosition);
    }

    public float getCurretPlayProcess() {
        return (float) mPosition / (float) mWaveDataList.size();
    }

    public void moveWaveView(int moveLength) {
        mPosition = mPosition - (int) (moveLength / mWavesInterval);
        if (mPosition < 0) {
            mPosition = 0;
        } else if (mPosition > mWaveDataList.size() - 1) {
            mPosition = mWaveDataList.size() - 1;
        }
    }

    public void moveToNextTag(boolean direction) {
        Log.d(TAG, "mTagSparseArray.size---->:" + mTagSparseArray.size() + ",boolean:" + direction);
        if (direction) {
            for (int i = 0; i < mTagSparseArray.size(); i++) {
                if (mPosition < mTagSparseArray.keyAt(i)) {
                    Log.d(TAG, "mPositon:" + mPosition + ",tag postion:" + mTagSparseArray.keyAt(i));
                    mPosition = mTagSparseArray.keyAt(i);
                    mPosition = mPosition < 0 ? 0 : mPosition;
                    break;
                }

            }
        } else {
            for (int i = mTagSparseArray.size() - 1; i >= 0; i--) {
                if (mPosition > mTagSparseArray.keyAt(i)) {
                    mPosition = mTagSparseArray.keyAt(i);
                    mPosition = mPosition < 0 ? 0 : mPosition;
                    break;
                }

            }
        }
    }

    /*
     * return is there more tags?
     * direction： true --> backward ;false -->forward
     * */
    public boolean isHaveMoreTag(boolean direction) {
        if (mTagSparseArray.size() == 0) {
            return false;
        }
        //Log.d(TAG, "mTagSparseArray:" + mTagSparseArray);
        if (direction) {
            return mPosition < mTagSparseArray.keyAt(mTagSparseArray.size() - 1);
        } else {
            return mPosition > mTagSparseArray.keyAt(0);
        }
    }



    @Override
    protected void onDraw(Canvas canvas) {
        Log.d(TAG, "ondraw: listsize:" + mWaveDataList.size() + "mTagSparseArray size: " + mTagSparseArray + "positon:" + mPosition+" getHeight:"+getHeight());
        int middle_height = getHeight()/2 ;
        int middle_width = getWidth() / 2;
        if (mWaveDataList.size() == 0) {
            canvas.drawBitmap(mWhiteBitmap, middle_width, middle_height, mPaintBaseLine);
        } else if (!mIsRecordPlay) {
            canvas.drawBitmap(mWhiteBitmap, middle_width, middle_height, mPaintBaseLine);
        }
        mWaveBaseValue = (float) getHeight() / 200;

        // canvas.drawLine(middle_width, 10, middle_width, getHeight()-10, mPaintLine);

        if (mWaveDataList == null || mWaveDataList.size() == 0)
            return;

        int start = 0;
        int end = 0;

        if (mIsRecordPlay) {
            mVisibleLines = (int) (getWidth() / mWavesInterval);
            start = mPosition > mVisibleLines / 2 ? (mPosition - mVisibleLines / 2)
                    : 0;
            end = mWaveDataList.size() > (start + mVisibleLines) ? (start + mVisibleLines)
                    : mWaveDataList.size();
            if (mPosition == 0 || mCount != mPosition) {
                mCount = 0;
            } else {
                mCount = 1;
            }
            for (int i = start; i < end; i++) {
                canvas.drawLine(
                        middle_width + (i - mPosition) *  (mWavesInterval + mSpace)
                                - (mCount) * mWavesInterval / 2,
                        middle_height - mWaveBaseValue * mWaveDataList.get(i),
                        middle_width + (i - mPosition) *  (mWavesInterval + mSpace)
                                - (mCount) * mWavesInterval / 2,
                        middle_height + mWaveBaseValue * mWaveDataList.get(i),
                        mPaintDate);
            }
            mCount = mPosition;
        } else {
//            if (mWaveDataList.size() != mLastSize) {
//                mLastSize = mWaveDataList.size();
//                mCount = 0;
//                Log.d(TAG, "onDraw set mCount = 0");
//            } else {
//                mCount = 1;
//                Log.d(TAG, "onDraw mCount = " + mCount);
//            }
//            mVisibleLines = (int) (getWidth() / (2 * mWavesInterval));
//            start = mWaveDataList.size() > mVisibleLines ? (mWaveDataList
//                    .size() - mVisibleLines) : 0;
//            for (int i = start; i < mWaveDataList.size(); i++) {
//                canvas.drawLine(
//                        middle_width - (mWaveDataList.size() - i - 1)
//                                * mWavesInterval - mCount * mWavesInterval / 2,
//                        middle_height - mWaveBaseValue * mWaveDataList.get(i),  //录音开始后左侧的声
//                        middle_width - (mWaveDataList.size() - i - 1)
//                                * mWavesInterval - mCount * mWavesInterval / 2,
//                        middle_height + mWaveBaseValue * mWaveDataList.get(i)*3/2,
//                        mPaintDate);
//                // canvas.drawLine(middle_width, 10, middle_width, getHeight()-10, mPaintLine);
//                if (mTagSparseArray.indexOfKey(i) >= 0) {
//                    if (mTagSparseArray.indexOfKey(i) == mLastTag) {
//                        canvas.drawBitmap(mBitmap,
//                                middle_width - mBitmap.getWidth() / 2, middle_height - mTagHalfSize
//                                , mPaintTag);
//                        mLastTag++;
//                    } else {
//                        canvas.drawBitmap(mLowBitmap,
//                                middle_width - (mWaveDataList.size() - i)
//                                        * mWavesInterval - mCount * mWavesInterval
//                                        / 2 - mSpace * 0.3f, middle_height - mSmallTagHalfSize
//                                , mPaintTag);
//                    }
//                }
//            }
        }
    }
}
